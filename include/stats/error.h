/* error.h */

#ifndef _ERROR_H_INCLUDED_
#define _ERROR_H_INCLUDED_

#define TRUE  1
#define FALSE 0

#define S_OK                         0x00000000
#define ERROR_FLAG                   0x80000000

#define ERROR_FACILITY_GENERAL       0x00010000
#define ERROR_FACILITY_SHARED_MEM    0x00020000
#define ERROR_FACILITY_SEMAPHORE     0x00030000
#define ERROR_FACILITY_STATS         0x00040000

#define ERROR_FAIL                                      ((int)(ERROR_FLAG | ERROR_FACILITY_GENERAL    | 0x0000))
#define ERROR_INVALID_PARAMETERS                        ((int)(ERROR_FLAG | ERROR_FACILITY_GENERAL    | 0x0001))
#define ERROR_MEMORY                                    ((int)(ERROR_FLAG | ERROR_FACILITY_GENERAL    | 0x0002))

#define ERROR_SHARED_MEM_NAME_TOO_LONG                  ((int)(ERROR_FLAG | ERROR_FACILITY_SHARED_MEM | 0x0001))
#define ERROR_SHARED_MEM_CANNOT_CREATE_DIRECTORY        ((int)(ERROR_FLAG | ERROR_FACILITY_SHARED_MEM | 0x0002))
#define ERROR_SHARED_MEM_PATH_NOT_DIRECTORY             ((int)(ERROR_FLAG | ERROR_FACILITY_SHARED_MEM | 0x0003))
#define ERROR_SHARED_MEM_CANNOT_CREATE_PATH             ((int)(ERROR_FLAG | ERROR_FACILITY_SHARED_MEM | 0x0004))
#define ERROR_SHARED_MEM_CANNOT_CREATE_IPC_TOKEN        ((int)(ERROR_FLAG | ERROR_FACILITY_SHARED_MEM | 0x0005))
#define ERROR_SHARED_MEM_ALREADY_EXISTS                 ((int)(ERROR_FLAG | ERROR_FACILITY_SHARED_MEM | 0x0006))
#define ERROR_SHARED_MEM_DOES_NOT_EXIST                 ((int)(ERROR_FLAG | ERROR_FACILITY_SHARED_MEM | 0x0007))
#define ERROR_SHARED_MEM_INVALID_SIZE                   ((int)(ERROR_FLAG | ERROR_FACILITY_SHARED_MEM | 0x0008))
#define ERROR_SHARED_MEM_CANNOT_STAT                    ((int)(ERROR_FLAG | ERROR_FACILITY_SHARED_MEM | 0x0009))
#define ERROR_SHARED_MEM_CANNOT_OPEN                    ((int)(ERROR_FLAG | ERROR_FACILITY_SHARED_MEM | 0x000A))
#define ERROR_SHARED_MEM_CANNOT_ATTACH                  ((int)(ERROR_FLAG | ERROR_FACILITY_SHARED_MEM | 0x000B))


#define ERROR_SEMAPHORE_NAME_TOO_LONG                   ((int)(ERROR_FLAG | ERROR_FACILITY_SEMAPHORE | 0x0001))
#define ERROR_SEMAPHORE_CANNOT_CREATE_DIRECTORY         ((int)(ERROR_FLAG | ERROR_FACILITY_SEMAPHORE | 0x0002))
#define ERROR_SEMAPHORE_PATH_NOT_DIRECTORY              ((int)(ERROR_FLAG | ERROR_FACILITY_SEMAPHORE | 0x0003))
#define ERROR_SEMAPHORE_CANNOT_CREATE_PATH              ((int)(ERROR_FLAG | ERROR_FACILITY_SEMAPHORE | 0x0004))
#define ERROR_SEMAPHORE_CANNOT_CREATE_IPC_TOKEN         ((int)(ERROR_FLAG | ERROR_FACILITY_SEMAPHORE | 0x0005))
#define ERROR_SEMAPHORE_ALREADY_EXISTS                  ((int)(ERROR_FLAG | ERROR_FACILITY_SEMAPHORE | 0x0006))
#define ERROR_SEMAPHORE_DOES_NOT_EXIST                  ((int)(ERROR_FLAG | ERROR_FACILITY_SEMAPHORE | 0x0007))
#define ERROR_SEMAPHORE_INVALID_SIZE                    ((int)(ERROR_FLAG | ERROR_FACILITY_SEMAPHORE | 0x0008))
#define ERROR_SEMAPHORE_CANNOT_OPEN                     ((int)(ERROR_FLAG | ERROR_FACILITY_SEMAPHORE | 0x000A))

#define ERROR_STATS_CANNOT_ALLOCATE_COUNTER             ((int)(ERROR_FLAG | ERROR_FACILITY_STATS | 0x0001))
#define ERROR_STATS_KEY_TOO_LONG                        ((int)(ERROR_FLAG | ERROR_FACILITY_STATS | 0x0002))

const char * error_message(int code);


#endif
